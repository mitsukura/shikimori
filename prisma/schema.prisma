// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id        String   @id @default(uuid()) @db.Uuid
  clerkId   String?  @unique @map("clerk_id")
  isAdmin   Boolean  @default(false) @map("is_admin")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  phone     String?
  bio       String?  @db.Text
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // リレーション
  orders    Order[]
  
  @@map("users")
}

// 商品モデル
model Item {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?  @map("image_url")
  category    String?
  isAvailable Boolean  @default(true) @map("is_available")
  stock       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // リレーション
  orderItems  OrderItem[]
  
  @@map("items")
}

// 地図/場所モデル
model Map {
  id        String   @id @default(uuid()) @db.Uuid
  address   String
  name      String?
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // リレーション
  orders    Order[]
  
  @@map("maps")
}

// 支払いモデル
model Payment {
  id                     String    @id @default(uuid()) @db.Uuid
  method                 String
  status                 String
  stripeIntentId         String?   @map("stripe_intent_id")
  stripeAuthorizedAmount Decimal?  @map("stripe_authorized_amount") @db.Decimal(10, 2)
  stripeAuthorizerId     String?   @map("stripe_authorizer_id")
  stripeCapturedAmount   Decimal?  @map("stripe_captured_amount") @db.Decimal(10, 2)
  stripeCapturedAt       DateTime? @map("stripe_captured_at")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  
  // リレーション
  order                  Order?
  refunds                Refund[]
  
  @@map("payments")
}

// 注文モデル
model Order {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  mapId     String   @map("map_id") @db.Uuid
  paymentId String   @unique @map("payment_id") @db.Uuid
  orderDate DateTime @default(now()) @map("order_date")
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // リレーション
  user      User     @relation(fields: [userId], references: [id])
  map       Map      @relation(fields: [mapId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

// 注文商品モデル
model OrderItem {
  id           String   @id @default(uuid()) @db.Uuid
  orderId      String   @map("order_id") @db.Uuid
  itemId       String   @map("item_id") @db.Uuid
  quantity     Int
  priceAtOrder Decimal  @map("price_at_order") @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // リレーション
  order        Order    @relation(fields: [orderId], references: [id])
  item         Item     @relation(fields: [itemId], references: [id])
  
  @@map("order_items")
}

// 返金モデル
model Refund {
  id        String   @id @default(uuid()) @db.Uuid
  paymentId String   @map("payment_id") @db.Uuid
  amount    Decimal  @db.Decimal(10, 2)
  refundAt  DateTime @default(now()) @map("refund_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // リレーション
  payment   Payment  @relation(fields: [paymentId], references: [id])
  
  @@map("refunds")
}
