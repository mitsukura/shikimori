generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  isAdmin   Boolean  @default(false) @map("is_admin")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  clerkId   String?  @unique @map("clerk_id")
  address   String?
  bio       String?
  orders    Order[]

  @@map("users")
}

model Item {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?     @map("image_url")
  category    String?
  isAvailable Boolean     @default(true) @map("is_available")
  stock       Int         @default(0)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  orderItems  OrderItem[]

  @@map("items")
}

model Map {
  id        String   @id @default(uuid()) @db.Uuid
  address   String
  name      String?
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Order[]

  @@map("maps")
}

model Payment {
  id                     String    @id @default(uuid()) @db.Uuid
  method                 String
  status                 String
  stripeIntentId         String?   @map("stripe_intent_id")
  stripeAuthorizedAmount Decimal?  @map("stripe_authorized_amount") @db.Decimal(10, 2)
  stripeAuthorizerId     String?   @map("stripe_authorizer_id")
  stripeCapturedAmount   Decimal?  @map("stripe_captured_amount") @db.Decimal(10, 2)
  stripeCapturedAt       DateTime? @map("stripe_captured_at")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  order                  Order?
  refunds                Refund[]

  @@map("payments")
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  mapId      String      @map("map_id") @db.Uuid
  paymentId  String      @unique @map("payment_id") @db.Uuid
  orderDate  DateTime    @default(now()) @map("order_date")
  status     String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  orderItems OrderItem[]
  map        Map         @relation(fields: [mapId], references: [id])
  payment    Payment     @relation(fields: [paymentId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid()) @db.Uuid
  orderId      String   @map("order_id") @db.Uuid
  itemId       String   @map("item_id") @db.Uuid
  quantity     Int
  priceAtOrder Decimal  @map("price_at_order") @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  item         Item     @relation(fields: [itemId], references: [id])
  order        Order    @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Refund {
  id        String   @id @default(uuid()) @db.Uuid
  paymentId String   @map("payment_id") @db.Uuid
  amount    Decimal  @db.Decimal(10, 2)
  refundAt  DateTime @default(now()) @map("refund_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  payment   Payment  @relation(fields: [paymentId], references: [id])

  @@map("refunds")
}

/// 投稿（ブログ記事など）モデル
model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String
  categoryId Int?
  image_url  String?
  category   Category? @relation(fields: [categoryId], references: [id])

  @@map("posts")
}

/// 投稿カテゴリモデル
model Category {
  id    Int    @id(map: "Category_pkey") @default(autoincrement())
  name  String @unique(map: "Category_name_key")
  posts Post[]

  @@map("categories")
}
